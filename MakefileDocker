# -*- mode: makefile; -*-

# Copyright (c) 2019-2023
# Shell-ML Project
# Pedro Ribeiro Mendes Júnior <pedrormjunior@gmail.com> et al.
# Artificial Intelligence Lab. Recod.ai
# Institute of Computing (IC)
# University of Campinas (Unicamp)
# Campinas, São Paulo, Brazil
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

include common.mk

# dockerfile := pytorch-1-13-1-cuda11-6-cudnn8-devel
dockerfile := nvidia-pytorch-23-05-py3

dockerserver := shell
dockerfilesdir := ${PWD}/Dockerfiles
dockerusername := pmendes
dockerhome := /home/$(dockerusername)
dockerimage := img-$(dockerusername)-$(dockerfile)
dockercontainer := ctnr-$(dockerusername)-$(dockerserver)-$(shell uname -n)-$(dockerfile)
# DOCKER = nvidia-docker
DOCKER := docker
DOCKER_RUN_PARAMS := --gpus all

$(dockerimage):
	$(call print_vars,dockerfile) \
	cd $(dockerfilesdir) && \
	$(DOCKER) build \
		--build-arg UID=$$(id -u) \
		--build-arg GID=$$(id -g) \
		--build-arg GNAME=$$(id -gn) \
		--build-arg USERNAME=$(dockerusername) \
		-t $(dockerimage) -f $(dockerfile) .

$(DOCKER):
	@if ! $(DOCKER) container inspect $(dockercontainer) > /dev/null; then \
		echo "Generating docker image..."; \
		make $(DOCKER)-run; \
	elif ! $(DOCKER) ps | grep $(dockercontainer) > /dev/null; then \
		echo "Starting a new session"; \
		make $(DOCKER)-start; \
	else \
		echo "Attaching to old session"; \
		make $(DOCKER)-attach; \
	fi; \

$(DOCKER)-run: $(dockerimage)
	@$(DOCKER) run $(DOCKER_RUN_PARAMS) -it \
		--userns=host \
		--ipc=host \
		--network=host \
		--privileged \
		-h docker-$(shell hostname) \
		-v /work:/work \
		-v /datashell:/datashell \
		-v ${HOME}:$(dockerhome) \
		-w $(dockerhome) \
		--name $(dockercontainer) \
		--detach-keys="ctrl-q,d" \
		$(dockerimage) /bin/bash

$(DOCKER)-attach:
# The "|| true" at the end is to avoid showing the error
# signal returned by Docker when detached from the container.
	@$(DOCKER) attach $(dockercontainer) --detach-keys="ctrl-q,d" || true

$(DOCKER)-start:
	@$(DOCKER) start -ai $(dockercontainer) --detach-keys="ctrl-q,d"

$(DOCKER)-start-root:
	$(DOCKER) start -u 0 -ai $(dockercontainer) --detach-keys="ctrl-q,d"

$(DOCKER)-exec:
	$(DOCKER) exec -it $(dockercontainer) /bin/bash

$(DOCKER)-exec-root:
	$(DOCKER) exec -u 0 -it $(dockercontainer) /bin/bash

$(DOCKER)-stop:
	$(DOCKER) stop $(dockercontainer)

$(DOCKER)-rm:
	make -e $(DOCKER)-stop; \
	$(DOCKER) rm $(dockercontainer) || echo 'Docker container was not there.'; \

$(DOCKER)-rmi: $(DOCKER)-rm
	$(DOCKER) rmi $(dockerimage)

$(DOCKER)-restart:
	make -e $(DOCKER)-stop; \
	make -e $(DOCKER)-rm; \
	make -e $(DOCKER)-run; \
